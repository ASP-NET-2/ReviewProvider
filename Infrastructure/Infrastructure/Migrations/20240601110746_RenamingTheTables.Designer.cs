// <auto-generated />
using System;
using Infrastructure.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(FeedbackItemsDataContext))]
    [Migration("20240601110746_RenamingTheTables")]
    partial class RenamingTheTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.Entities.ProductFeedbackEntity", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("AverageRating")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("RatingCount")
                        .HasColumnType("int");

                    b.Property<int>("ReviewCount")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.ToTable("ProductFeedbacks");
                });

            modelBuilder.Entity("Infrastructure.Entities.RatingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Rating")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.ToTable("UserRatings");
                });

            modelBuilder.Entity("Infrastructure.Entities.ReviewEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OriginallyPostedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewTitle")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.ToTable("UserReviews");
                });

            modelBuilder.Entity("Infrastructure.Entities.UserFeedbackEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductFeedbackEntityProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RatingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductFeedbackEntityProductId");

                    b.HasIndex("RatingId");

                    b.HasIndex("ReviewId");

                    b.ToTable("UserFeedbacks");
                });

            modelBuilder.Entity("Infrastructure.Entities.UserFeedbackEntity", b =>
                {
                    b.HasOne("Infrastructure.Entities.ProductFeedbackEntity", null)
                        .WithMany("UserFeedbacks")
                        .HasForeignKey("ProductFeedbackEntityProductId");

                    b.HasOne("Infrastructure.Entities.RatingEntity", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId");

                    b.HasOne("Infrastructure.Entities.ReviewEntity", "Review")
                        .WithMany()
                        .HasForeignKey("ReviewId");

                    b.Navigation("Rating");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("Infrastructure.Entities.ProductFeedbackEntity", b =>
                {
                    b.Navigation("UserFeedbacks");
                });
#pragma warning restore 612, 618
        }
    }
}
